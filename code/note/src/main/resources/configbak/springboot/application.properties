server.port=7080
server.servlet.context-path=/me

## 数据源配置
spring.datasource.mysql.url=jdbc:mysql://172.16.209.1:3306/test?useUnicode=true&characterEncoding=UTF8
spring.datasource.mysql.username=root
spring.datasource.mysql.password=123456
spring.datasource.mysql.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.mysql.driver-class-name=com.mysql.jdbc.Driver

#phoenix
phoenix.dbclass=org.apache.phoenix.jdbc.PhoenixDriver
phoenix.connectionurl=jdbc:phoenix:172.16.209.1:2181

## Mybatis 配置
#configbak.mybatis.mapperLocations=classpath:configbak.mybatis/mapping/*.xml
#configbak.mybatis.configLocation=classpath:configbak.mybatis/sqlMapConfig.xml
#configbak.mybatis.type-aliases-package=classpath:com.downjoy.bigdata.to

## 时间格式配置(时间戳格式返回时间，java.time.LocalDateTime会被转换成一个形如 [2018,5,31,17,58,35] 的数组，而非毫秒数)
# spring.jackson.serialization.write-dates-as-timestamps=true
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
# spring.jackson.date-format=yyyy-MM-dd
spring.jackson.time-zone=GMT+8

# jackson
# 过滤null值
spring.jackson.default-property-inclusion=non_null

## 日志
logging.level.com.downjoy.bigdata.dao=INFO
logging.config=classpath:logback-spring.xml
logging.path=/var/logs/blog/

## druid pool
# 配置测试查询语句
spring.datasource.druid.validationQuery=SELECT 'x'
# 最小空闲连接数
spring.datasource.druid.min-idle=1
# 最大并发连接数
spring.datasource.druid.max-active=40
# 初始化连接数量
spring.datasource.druid.initial-size=20
# 连接等待超时的时间
spring.datasource.druid.maxWait=60000
# 间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.timeBetweenEvictionRunsMillis=280000
# 一个连接在池中最小生存的时间，单位是毫秒,timeBetweenEvictionRunsMillis大于0时才有意义
spring.datasource.druid.minEvictableIdleTimeMillis=18000000
# 是否检查连接可用性,建议关闭，影响性能
spring.datasource.druid.testOnBorrow=false
# 归还连接时执行可用性检测,建议关闭，影响性能
spring.datasource.druid.testOnReturn=false
# 是否对idle object进行扫描
spring.datasource.druid.testWhileIdle=true
# 慢查询监控
spring.datasource.druid.connectionProperties='druid.stat.mergeSql=true;druid.stat.slowSqlMillis=2000'
# 保存DruidDataSource的监控记录
spring.datasource.druid.timeBetweenLogStatsMillis=300000
# 是否开启PSCache，PSCache对支持游标的数据库性能提升巨大，oracle建议开启，mysql下建议关闭
spring.datasource.druid.poolPreparedStatements=false
# 每个连接上PSCache的大小
spring.datasource.druid.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计(配置扩展插件，常用的插件有=>stat:监控统计  log4j:日志  wall:防御sql注入)
spring.datasource.druid.filters= stat,wall,log4j

## druid监控配置(WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter)
#是否启用StatFilter默认值true
spring.datasource.druid.web-stat-filter.enabled=true
# 设置过滤器过滤路径
spring.datasource.druid.web-stat-filter.url-pattern=/*
# 忽略过滤的形式
spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
# session统计功能
spring.datasource.druid.web-stat-filter.session-stat-enable=true
# 最大session数
spring.datasource.druid.web-stat-filter.session-stat-max-count=100000
# 你可以配置principalSessionName，使得druid能够知道当前的session的用户是谁
spring.datasource.druid.web-stat-filter.principal-session-name=admin
# 你可以配置principalSessionName，使得druid能够知道当前的cookie的用户是谁
spring.datasource.druid.web-stat-filter.principal-cookie-name=admin
# 置profileEnable能够监控单个url调用的sql列表。
spring.datasource.druid.web-stat-filter.profile-enable=true

## StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
spring.datasource.druid.stat-view-servlet.enabled= true
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
# 是否可以重置数据
spring.datasource.druid.stat-view-servlet.reset-enable=true
# 控制台管理用户
spring.datasource.druid.stat-view-servlet.login-username=admin
# 控制台管理用户
spring.datasource.druid.stat-view-servlet.login-password=admin
# 设置ip白名单
spring.datasource.druid.stat-view-servlet.allow=
# 设置ip黑名单，如果allow与deny共同存在时,deny优先于allow
spring.datasource.druid.stat-view-servlet.deny=

#配置wall filter
spring.datasource.druid.filter.wall.enabled=true
spring.datasource.druid.filter.wall.db-type=mysql
spring.datasource.druid.filter.wall.config.alter-table-allow=false
spring.datasource.druid.filter.wall.config.truncate-allow=false
spring.datasource.druid.filter.wall.config.drop-table-allow=false
#是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项就能够屏蔽DDL。
spring.datasource.druid.filter.wall.config.none-base-statement-allow=false
#检查UPDATE语句是否无where条件，这是有风险的，但不是SQL注入类型的风险
spring.datasource.druid.filter.wall.config.update-where-none-check=true
#SELECT ... INTO OUTFILE 是否允许，这个是mysql注入攻击的常见手段，缺省是禁止的
spring.datasource.druid.filter.wall.config.select-into-outfile-allow=false
#是否允许调用Connection.getMetadata方法，这个方法调用会暴露数据库的表信息
spring.datasource.druid.filter.wall.config.metadata-allow=true
#对被认为是攻击的SQL进行LOG.error输出
spring.datasource.druid.filter.wall.log-violation=true
#对被认为是攻击的SQL抛出SQLExcepton
spring.datasource.druid.filter.wall.throw-exception=true